#!/usr/bin/env python3
"""
Auto Applyer - SQLite Cloud Setup Script

Simple setup script for SQLite Cloud using their API-based approach.
This script helps you get started with SQLite Cloud quickly.
"""

import os
import sys
import argparse
from pathlib import Path

# Add project root to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from database.sqlite_cloud_sync import get_sync_manager
from utils.logging_config import get_logger

logger = get_logger(__name__)


def setup_sqlite_cloud():
    """Set up SQLite Cloud for the application."""
    print("üöÄ SQLite Cloud Setup for Auto Applyer")
    print("="*50)
    
    # Get host from user
    host = input("Enter your SQLite Cloud host (e.g., czdyoyrynz.g4.sqlite.cloud): ").strip()
    if not host:
        print("‚ùå Host is required")
        return False
    
    # Get API key from user
    api_key = input("Enter your SQLite Cloud API key: ").strip()
    if not api_key:
        print("‚ùå API key is required")
        return False
    
    # Get database name
    database_name = input("Enter database name (default: auto_applyer): ").strip()
    if not database_name:
        database_name = "auto_applyer"
    
    # Get port
    port = input("Enter port (default: 8860): ").strip()
    if not port:
        port = "8860"
    
    print(f"\nüìã Configuration:")
    print(f"   Host: {host}")
    print(f"   Port: {port}")
    print(f"   Database: {database_name}")
    print(f"   API Key: {api_key[:10]}...")
    
    # Confirm setup
    confirm = input("\nProceed with setup? (y/N): ").strip().lower()
    if confirm != 'y':
        print("Setup cancelled")
        return False
    
    try:
        # Create environment file
        print("\nüìù Creating environment configuration...")
        create_env_file(host, port, database_name, api_key)
        
        # Test connection
        print("\nüîç Testing connection...")
        if test_connection(api_key, host, port, database_name):
            print("‚úÖ Connection test successful")
        else:
            print("‚ö†Ô∏è  Connection test failed, but setup will continue")
        
        # Create local database if it doesn't exist
        local_db_path = Path('data/auto_applyer_production.db')
        if not local_db_path.exists():
            print("\nüóÑÔ∏è Creating local database...")
            local_db_path.parent.mkdir(exist_ok=True)
            
            # Import database initialization
            from database.connection import init_database
            init_database('production')
            print("‚úÖ Local database created successfully")
        
        print("\nüéâ SQLite Cloud setup completed successfully!")
        print("\nüìã Next steps:")
        print("1. Environment configuration saved to .env.production")
        print("2. Run 'python scripts/validate_sqlite_cloud.py' to verify setup")
        print("3. Deploy with 'python scripts/deploy_production.py'")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Setup failed: {e}")
        logger.error(f"SQLite Cloud setup failed: {e}")
        return False


def create_env_file(host: str, port: str, database_name: str, api_key: str):
    """Create production environment file."""
    env_content = f"""# Auto Applyer - Production Environment Configuration
# Generated by SQLite Cloud setup script

# ==========================================
# APPLICATION ENVIRONMENT
# ==========================================
ENVIRONMENT=production
DEBUG=false
LOG_LEVEL=INFO

# ==========================================
# SQLITE CLOUD DATABASE CONFIGURATION
# ==========================================
SQLITE_CLOUD_HOST={host}
SQLITE_CLOUD_PORT={port}
SQLITE_CLOUD_DATABASE={database_name}
SQLITE_CLOUD_API_KEY={api_key}

# ==========================================
# DATABASE CONNECTION POOL SETTINGS
# ==========================================
DATABASE_POOL_SIZE=10
DATABASE_MAX_OVERFLOW=20
DATABASE_POOL_RECYCLE=3600
DATABASE_TIMEOUT=30

# ==========================================
# AI SERVICES CONFIGURATION
# ==========================================
GROQ_API_KEY=your_groq_api_key_here
GROQ_MODEL=llama3-8b-8192
GROQ_MAX_TOKENS=3000
GROQ_TEMPERATURE=0.7

# ==========================================
# SECURITY & AUTHENTICATION
# ==========================================
SECRET_KEY=your_very_long_random_secret_key_here
JWT_SECRET_KEY=your_jwt_secret_key_here
JWT_ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=60

# ==========================================
# APPLICATION SETTINGS
# ==========================================
APP_NAME=Auto Applyer
APP_VERSION=2.0.0
APP_URL=https://your-domain.com
API_URL=https://your-domain.com/api

# ==========================================
# NOTES
# ==========================================
# 1. Replace placeholder values with your actual configuration
# 2. Keep this file secure and never commit it to version control
# 3. Use strong, unique passwords and API keys
"""
    
    env_file = Path(".env.production")
    with open(env_file, "w") as f:
        f.write(env_content)
    
    print(f"‚úÖ Environment file created: {env_file}")


def test_connection(api_key: str, host: str, port: str, database_name: str):
    """Test SQLite Cloud connection."""
    print("üîç Testing SQLite Cloud connection...")
    
    try:
        # Test direct connection using SQLAlchemy
        from database.connection import DatabaseConfig
        
        # Set environment variables for testing
        os.environ['SQLITE_CLOUD_HOST'] = host
        os.environ['SQLITE_CLOUD_PORT'] = port
        os.environ['SQLITE_CLOUD_DATABASE'] = database_name
        os.environ['SQLITE_CLOUD_API_KEY'] = api_key
        os.environ['ENVIRONMENT'] = 'production'
        
        # Test configuration
        config = DatabaseConfig('production')
        print(f"‚úÖ Configuration loaded successfully")
        print(f"   Connection URL: {config.config['database_url'].replace(api_key, '***')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Connection test failed: {e}")
        return False


def main():
    """Main function."""
    parser = argparse.ArgumentParser(description='Setup SQLite Cloud for Auto Applyer')
    parser.add_argument('--test', action='store_true',
                       help='Test existing SQLite Cloud connection')
    parser.add_argument('--api-key', type=str,
                       help='SQLite Cloud API key')
    parser.add_argument('--database', type=str, default='auto_applyer',
                       help='Database name (default: auto_applyer)')
    parser.add_argument('--host', type=str,
                       help='SQLite Cloud host')
    parser.add_argument('--port', type=str, default='8860',
                       help='Port (default: 8860)')
    
    args = parser.parse_args()
    
    if args.test:
        # Test existing connection
        api_key = args.api_key or os.getenv('SQLITE_CLOUD_API_KEY')
        host = os.getenv('SQLITE_CLOUD_HOST')
        port = os.getenv('SQLITE_CLOUD_PORT', '8860')
        database = args.database or os.getenv('SQLITE_CLOUD_DATABASE', 'auto_applyer')
        
        if not api_key or not host:
            print("‚ùå API key and host required for testing. Use --api-key or set environment variables")
            sys.exit(1)
        
        success = test_connection(api_key, host, port, database)
        sys.exit(0 if success else 1)
    
    else:
        # Interactive setup
        success = setup_sqlite_cloud()
        sys.exit(0 if success else 1)


if __name__ == "__main__":
    main() 