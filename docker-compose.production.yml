version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=production
    container_name: auto-applyer-backend
    ports:
      - "8000:8000"
    environment:
      # Application Environment
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      
      # SQLite Cloud Database Configuration
      - SQLITE_CLOUD_HOST=${SQLITE_CLOUD_HOST}
      - SQLITE_CLOUD_PORT=${SQLITE_CLOUD_PORT:-8860}
      - SQLITE_CLOUD_DATABASE=${SQLITE_CLOUD_DATABASE}
      - SQLITE_CLOUD_API_KEY=${SQLITE_CLOUD_API_KEY}
      
      # Database Pool Configuration
      - DATABASE_POOL_SIZE=${DATABASE_POOL_SIZE:-10}
      - DATABASE_MAX_OVERFLOW=${DATABASE_MAX_OVERFLOW:-20}
      - DATABASE_POOL_RECYCLE=${DATABASE_POOL_RECYCLE:-3600}
      - DATABASE_TIMEOUT=${DATABASE_TIMEOUT:-30}
      
      # AI Services
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GROQ_MODEL=${GROQ_MODEL:-llama3-8b-8192}
      - GROQ_MAX_TOKENS=${GROQ_MAX_TOKENS:-3000}
      - GROQ_TEMPERATURE=${GROQ_TEMPERATURE:-0.7}
      
      # Security
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-60}
      
      # Application Settings
      - APP_NAME=${APP_NAME:-Auto Applyer}
      - APP_VERSION=${APP_VERSION:-2.0.0}
      - APP_URL=${APP_URL}
      - API_URL=${API_URL}
      
      # Logging
      - LOG_FILE=${LOG_FILE:-logs/app.log}
      - LOG_MAX_SIZE=${LOG_MAX_SIZE:-10MB}
      - LOG_BACKUP_COUNT=${LOG_BACKUP_COUNT:-5}
      - SENTRY_DSN=${SENTRY_DSN}
      
      # File Storage
      - UPLOAD_DIR=${UPLOAD_DIR:-uploads}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-10485760}
      - ALLOWED_EXTENSIONS=${ALLOWED_EXTENSIONS:-pdf,docx,txt}
      
      # CORS
      - CORS_ORIGINS=${CORS_ORIGINS}
      - CORS_ALLOW_CREDENTIALS=${CORS_ALLOW_CREDENTIALS:-true}
      
      # Performance
      - CACHE_TTL=${CACHE_TTL:-3600}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-100}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-3600}
      
      # Backup
      - BACKUP_ENABLED=${BACKUP_ENABLED:-true}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./data:/app/data
    networks:
      - auto-applyer-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  frontend:
    build:
      context: ./job-frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: auto-applyer-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${API_URL:-http://localhost:8000}
      - NEXT_PUBLIC_APP_NAME=${APP_NAME:-Auto Applyer}
      - NEXT_PUBLIC_APP_VERSION=${APP_VERSION:-2.0.0}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - auto-applyer-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: auto-applyer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - auto-applyer-network
    restart: unless-stopped
    profiles:
      - nginx

  # Optional: Redis for caching (if needed)
  redis:
    image: redis:7-alpine
    container_name: auto-applyer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - auto-applyer-network
    restart: unless-stopped
    profiles:
      - cache
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

networks:
  auto-applyer-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local 